grep("!(Rocket)", SCC$Short.Name, ignore.case = TRUE)
grep("(Rocket)", SCC$Short.Name, ignore.case = TRUE)
grep("(Rocket)", SCC$Short.Name, ignore.case = TRUE)
grep("^[^Rocket]*[Motor]", SCC$Short.Name, ignore.case = TRUE)
grep("[^Rocket]*[Motor]", SCC$Short.Name, ignore.case = TRUE)
SCCMotorVehicle <- SCC[grepl("[Motor|Vehicles]", Short.Name, ignore.case = TRUE)]
str(SCCMotorVehicle)
View(SCCMotorVehicle)
SCCMotorVehicle <- SCC[grepl("[Motor|Vehicles]", Short.Name, ignore.case = TRUE)]
View(SCCMotorVehicle)
SCCMotorVehicle <- SCC[grepl("Motor|Vehicles", Short.Name, ignore.case = TRUE)]
View(SCCMotorVehicle)
str(SCCMotorVehicle)
NEI <- data.table(readRDS("summarySCC_PM25.rds"))
SCC <- data.table(readRDS("Source_Classification_Code.rds"))
# Filter data
yearTotalEmissions <- NEI[, list(totalEmissions = sum(Emissions)), by = year]
plot(yearTotalEmissions, type="l", main = "Total PM2.5 emissions per year", ylab = "PM2.5 emission in tons", col = "red")
library(data.table)
yearTotalEmissions <- NEI[, list(totalEmissions = sum(Emissions)), by = year]
plot(yearTotalEmissions, type="l", main = "Total PM2.5 emissions per year", ylab = "PM2.5 emission in tons", col = "red")
dev.off()
png(file = "plot1.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
plot(yearTotalEmissions, type="l", main = "Total PM2.5 emissions per year", ylab = "PM2.5 emission in tons", col = "red")
dev.off()
yearTotalEmissions <- NEI[, list(totalEmissions = sum(Emissions)), by = year]
# Plot
png(file = "plot1.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
plot(yearTotalEmissions, type="l", main = "Total PM2.5 emissions per year", ylab = "PM2.5 emission in tons", col = "red")
dev.off()
yearTotalEmissionsBaltimore <- NEI[fips == "24510", list(totalEmissions = sum(Emissions)), by = year]
#Plot 2
png(file = "plot2.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
plot(yearTotalEmissionsBaltimore, type="l", main = "Total PM2.5 emissions in Baltimore", ylab = "PM2.5 emission in tons", col = "red")
dev.off()
yearTotalEmissionsBaltimore <- NEI[fips == "24510", list(totalEmissions = sum(Emissions)), by = list(type, year)]
#Plot
png(file = "plot3.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissions, data = yearTotalEmissionsBaltimore, main = "Total PM2.5 emissions in Baltimore", ylab = "PM2.5 emission in tons", geom="path", col = type)
dev.off()
SCCCombustionCoal <- SCC[grepl("(Comb).*(Coal)", EI.Sector, ignore.case = TRUE)]
NEICombustionCoal <- NEI[SCC %in% SCCCombustionCoal$SCC, list(totalEmissions = sum(Emissions)), by = year]
# Plot
png(file = "plot4.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissions, data = NEICombustionCoal, main = "Coal combustion-related PM2.5 emissions in the USA", ylab = "PM2.5 emission in tons", geom="path")
dev.off()
SCCMotorVehicle <- SCC[grepl("Motor|Vehicles", Short.Name, ignore.case = TRUE)]
View(SCCMotorVehicle)
NEICombustionCoal <- NEI[SCC %in% SCCMotorVehicle$SCC & fips == "24510", list(totalEmissions = sum(Emissions)), by = year]
View(NEICombustionCoal)
NEICombustionCoal <- NEI[SCC %in% SCCMotorVehicle$SCC , list(totalEmissions = sum(Emissions)), by = year]
View(NEICombustionCoal)
& fips == "24510"
NEICombustionCoal <- NEI[SCC %in% SCCMotorVehicle$SCC & fips == "24510", list(totalEmissions = sum(Emissions)), by = year]
View(NEICombustionCoal)
SCCMotorVehicle <- SCC[grepl("Motor|Vehicles", Short.Name, ignore.case = TRUE)]
yearTotalEmissionsBaltimoreMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips == "24510", list(totalEmissions = sum(Emissions)), by = year]
png(file = "plot5.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissions, data = yearTotalEmissionsBaltimoreMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", geom="path", col = type)
dev.off()
png(file = "plot5.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissions, data = yearTotalEmissionsBaltimoreMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", geom="path")
dev.off()
# Filter data
fipsCities = c("24510","06037")
SCCMotorVehicle <- SCC[grepl("Motor|Vehicles", Short.Name, ignore.case = TRUE)]
yearTotalEmissionsBalLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips %in% fipsCities, list(totalEmissions = sum(Emissions)), by = year]
fipsCities = c("24510","06037")
SCCMotorVehicle <- SCC[grepl("Motor|Vehicles", Short.Name, ignore.case = TRUE)]
yearTotalEmissionsBalLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips %in% fipsCities, list(totalEmissions = sum(Emissions)), by = list(year, fips)]
View(yearTotalEmissionsBalLAMotorVehicles)
yearTotalEmissionsBalLAMotorVehicles[fips == "24510", city <- "Baltimore"]
yearTotalEmissionsBalLAMotorVehicles[fips == "06037", city <- "Los Angeles County"]
View(yearTotalEmissionsBalLAMotorVehicles)
yearTotalEmissionsBalLAMotorVehicles <- yearTotalEmissionsBalLAMotorVehicles[fips == "24510", city <- "Baltimore"]
yearTotalEmissionsBalLAMotorVehicles <- yearTotalEmissionsBalLAMotorVehicles[fips == "06037", city <- "Los Angeles County"]
View(yearTotalEmissionsBalLAMotorVehicles)
yearTotalEmissionsBalLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips %in% fipsCities, list(totalEmissions = sum(Emissions)), by = list(year, fips)]
View(yearTotalEmissionsBalLAMotorVehicles)
View(yearTotalEmissionsBalLAMotorVehicles)
qplot(year, totalEmissions, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", geom="path")
View(yearTotalEmissionsBalLAMotorVehicles)
yearTotalEmissionsBalLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips %in% fipsCities, list(totalEmissions = sum(Emissions)), by = list(fips, year)]
View(yearTotalEmissionsBalLAMotorVehicles)
qplot(year, totalEmissions, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", geom="path")
png(file = "plot3.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissions, data = yearTotalEmissionsBaltimore, main = "Total PM2.5 emissions in Baltimore", ylab = "PM2.5 emission in tons", geom="path", col = type)
dev.off()
qplot(year, totalEmissions, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", geom="path", col = fips)
yearTotalEmissionsBaltimoreMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips == "24510", list(totalEmissions = sum(Emissions)), by = list(fips, year)]
yearTotalEmissionsLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips == "06037", list(totalEmissions = sum(Emissions)), by = list(fips, year)]
qplot(year, totalEmissions, data = yearTotalEmissionsBaltimoreMotorVehicles, main = "Total PM2.5 emissions in Baltimore and L.A. from motor vehicles", ylab = "PM2.5 emission in tons", geom="path", col = fips)
qplot(year, totalEmissions, data = yearTotalEmissionsLAMotorVehicles, main = "Total PM2.5 emissions in Baltimore and L.A. from motor vehicles", ylab = "PM2.5 emission in tons", geom="path", col = fips)
plot(year, totalEmissions, data = yearTotalEmissionsBaltimoreMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", geom="path")
library(data.table)
library(ggplot2)
?qplot
qplot(year, totalEmissions, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", acets = fips ~ ., geom="path")
qplot(year, totalEmissions, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", facets = fips ~ ., geom="path")
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", geom="path"))
plot(year, totalEmissions, data = yearTotalEmissionsLAMotorVehicles, main = "Total PM2.5 emissions in L.A. from motor vehicles", ylab = "PM2.5 emission in tons", type = "l")
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", type = "l"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", type = "l"))
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", type = "l"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", type = "l"))
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", xlab = "", ylab = "PM2.5 emission in tons", type = "l"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Los Angeles county from motor vehicles", ylab = "PM2.5 emission in tons", type = "l"))
png(file = "plot6.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", xlab = "", ylab = "PM2.5 emission in tons", type = "l"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Los Angeles county from motor vehicles", ylab = "PM2.5 emission in tons", type = "l"))
dev.off()
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", xlab = "", ylab = "PM2.5 emission in tons", type = "l"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in L.A. county from motor vehicles", ylab = "PM2.5 emission in tons", type = "l"))
dev.off()
# Plot
png(file = "plot6.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", xlab = "", ylab = "PM2.5 emission in tons", type = "l"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in L.A. county from motor vehicles", ylab = "PM2.5 emission in tons", type = "l"))
dev.off()
png(file = "plot6.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", xlab = "", ylab = "PM2.5 emission in tons", type = "l", col = "red"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in L.A. county from motor vehicles", ylab = "PM2.5 emission in tons", type = "l", col = "red"))
dev.off()
yearTotalEmissionsBalLAMotorVehicles
qplot(year, totalEmissions, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", facets = . ~ fips, geom="path")
qplot(year, totalEmissions, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylab = "PM2.5 emission in tons", facets = fips ~ ., geom="path")
fipsLocations = c("24510","06037")
SCCMotorVehicle <- SCC[grepl("Motor|Vehicles", Short.Name, ignore.case = TRUE)]
yearTotalEmissionsBaltimoreMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips == "24510", list(totalEmissions = sum(Emissions)), by = list(fips, year)]
yearTotalEmissionsLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips == "06037", list(totalEmissions = sum(Emissions)), by = list(fips, year)]
# Plot
png(file = "plot6.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in Baltimore from motor vehicles", xlab = "", ylab = "PM2.5 emission in tons", type = "l", col = "red"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissions, main = "Total PM2.5 emissions in L.A. county from motor vehicles", ylab = "PM2.5 emission in tons", type = "l", col = "red"))
dev.off()
yearTotalEmissionsBaltimore <- NEI[fips == "24510", list(totalEmissions = sum(Emissions)), by = list(type, year)]
#Plot
png(file = "plot3.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissions, data = yearTotalEmissionsBaltimore, main = "Total PM2.5 emissions in Baltimore", ylab = "PM2.5 emission in tons",facets = type ~ ., geom="path", col = type)
dev.off()
#Plot
png(file = "plot3.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissions, data = yearTotalEmissionsBaltimore, main = "Total PM2.5 emissions in Baltimore", ylab = "PM2.5 emission in tons", geom="path", col = type)
dev.off()
yearTotalEmissionsBaltimoreMotorVehicles
yearTotalEmissionsLAMotorVehicles
yearTotalEmissionsBaltimoreMotorVehicles[, list(totalEmissionsPercentage = totalEmissions / max(totalEmissions))]
library(data.table)
yearTotalEmissionsBaltimoreMotorVehicles[, list(totalEmissionsPercentage = totalEmissions / max(totalEmissions))]
yearTotalEmissionsBaltimoreMotorVehicles <- yearTotalEmissionsBaltimoreMotorVehicles[, list(totalEmissionsPercentage = totalEmissions / max(totalEmissions), year)]
yearTotalEmissionsBaltimoreMotorVehicles
yearTotalEmissionsLAMotorVehicles <- yearTotalEmissionsLAMotorVehicles[, list(totalEmissionsPercentage = totalEmissions / max(totalEmissions), year)]
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissionsPercentage, main = "Total PM2.5 emissions in Baltimore from motor vehicles", xlab = "", ylab = "PM2.5 emission in tons", type = "l", col = "red"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissionsPercentage, main = "Total PM2.5 emissions in L.A. county from motor vehicles", ylab = "PM2.5 emission in tons", type = "l", col = "red"))
with(yearTotalEmissionsBaltimoreMotorVehicles, plot(year, totalEmissionsPercentage, main = "Total PM2.5 emissions in Baltimore from motor vehicles", ylim = c(0, 1), xlab = "", ylab = "PM2.5 emission in tons", type = "l", col = "red"))
with(yearTotalEmissionsLAMotorVehicles, plot(year, totalEmissionsPercentage, main = "Total PM2.5 emissions in L.A. county from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", type = "l", col = "red"))
yearTotalEmissionsBalLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips %in% fipsLocations, list(totalEmissions = sum(Emissions)), by = list(fips, year)]
yearTotalEmissionsBalLAMotorVehicles
yearTotalEmissionsBalLAMotorVehicles[, list(totalEmissionsPercentage = totalEmissions / max(totalEmissions), year), by = fips]
GetLocation <- function(fips) {
if (fips == "24510") {
location = "Baltimore"
} else {
location = "L.A. county"
}
}
yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips) }, totalEmissionsPercentage, year)]
yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissionsPercentage, year)]
yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissions, year)]
yearTotalEmissionsBalLAMotorVehicles
class(yearTotalEmissionsBalLAMotorVehicles)
GetLocation(24510)
location <- GetLocation(24510)
location
location <- GetLocation(06037)
location
yearTotalEmissionsBalLAMotorVehicles
yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissions, year)]
yearTotalEmissionsBalLAMotorVehicles
if (fips == 24510) {
location = "Baltimore"
} else {
location = "L.A. county"
}
GetLocation <- function(fips) {
if (fips == 24510) {
location = "Baltimore"
} else {
location = "L.A. county"
}
}
yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissions, year)]
GetLocation <- function(fips) {
if (24510 == fips) {
location = "Baltimore"
} else {
location = "L.A. county"
}
}
yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissions, year)]
yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissions, year), by = fips]
yearTotalEmissionsBalLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips %in% fipsLocations, list(totalEmissions = sum(Emissions)), by = list(fips, year)]
yearTotalEmissionsBalLAMotorVehicles <- yearTotalEmissionsBalLAMotorVehicles[, list(totalEmissionsPercentage = totalEmissions / max(totalEmissions), year), by = fips]
yearTotalEmissionsBalLAMotorVehicles <- yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissionsPercentage, year), by = fips]
yearTotalEmissionsBalLAMotorVehicles
qplot(qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", geom="path"))
library(ggplot2)
qplot(qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", geom="path"))
qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", geom="path")
yearTotalEmissionsBalLAMotorVehicles
qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, facets = locations ~ ., main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", geom="path")
qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, facets = fips ~ ., main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", geom="path")
qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, facets = location ~ ., main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", geom="path")
qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, col = location, main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", geom="path")
GetLocation <- function(fips) {
if (24510 == fips) {
location = "Baltimore"
} else {
location = "L.A. county"
}
}
fipsLocations = c("24510","06037")
SCCMotorVehicle <- SCC[grepl("Motor|Vehicles", Short.Name, ignore.case = TRUE)]
yearTotalEmissionsBalLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips %in% fipsLocations, list(totalEmissions = sum(Emissions)), by = list(fips, year)]
yearTotalEmissionsBalLAMotorVehicles <- yearTotalEmissionsBalLAMotorVehicles[, list(totalEmissionsPercentage = totalEmissions / max(totalEmissions), year), by = fips]
yearTotalEmissionsBalLAMotorVehicles <- yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissionsPercentage, year), by = fips]
# Plot
png(file = "plot6.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, col = location, main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission in tons", geom="path")
dev.off()
yearTotalEmissions <- NEI[, list(totalEmissions = sum(Emissions)), by = year]
yearTotalEmissions <- NEI[, list(totalEmissions = sum(Emissions)), by = year]
# Plot
png(file = "plot1.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
plot(yearTotalEmissions, type="l", main = "Total PM2.5 emissions per year U.S.A.", ylab = "PM2.5 emission in tons", col = "red")
dev.off()
SCCMotorVehicle <- SCC[grepl("Motor|Vehicles", Short.Name, ignore.case = TRUE)]
yearTotalEmissionsBalLAMotorVehicles <- NEI[SCC %in% SCCMotorVehicle$SCC & fips %in% fipsLocations, list(totalEmissions = sum(Emissions)), by = list(fips, year)]
# Get total emissions percentage
yearTotalEmissionsBalLAMotorVehicles <- yearTotalEmissionsBalLAMotorVehicles[, list(totalEmissionsPercentage = totalEmissions / max(totalEmissions), year), by = fips]
# Set location names
yearTotalEmissionsBalLAMotorVehicles <- yearTotalEmissionsBalLAMotorVehicles[, list(location = GetLocation(fips), totalEmissionsPercentage, year), by = fips]
# Plot
png(file = "plot6.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
qplot(year, totalEmissionsPercentage, data = yearTotalEmissionsBalLAMotorVehicles, col = location, main = "Total PM2.5 emissions from motor vehicles", ylim = c(0, 1), ylab = "PM2.5 emission normalized", geom="path")
dev.off()
rm(ls())
ls
ls()
rm(list(ls()))
allVariables <- ls()
rm(allVariables)
rm(list(ls()))
rm(as.characters(ls()))
rm(list = ls())
activity[, list(averageActivity := mean(steps, na.rm = TRUE)), by = interval]
library(data.table)
activity <- data.table(read.csv("activity.csv", sep = ",", header = TRUE))
getwd()
dir()
setwd("C:/projects/jhrcourse/RepData_PeerAssessment1")
library(data.table)
activity <- data.table(read.csv("activity.csv", sep = ",", header = TRUE))
activity[, list(averageActivity := mean(steps, na.rm = TRUE)), by = interval]
is.data.table(activity)
activityPerDay <- activity[, list(totalActivity = sum(steps)), by = date]
hist(activityPerDay$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
mean(activityPerDay$totalActivity, na.rm = TRUE)
median(activityPerDay$totalActivity, na.rm = TRUE)
activityPerInterval <- activity[, list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
activity[, list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
activity[, list(averageActivity := mean(steps, na.rm = TRUE)), by = interval]
activity[, list(averageActivity <- mean(steps, na.rm = TRUE)), by = interval]
activityPerInterval <- activity[, list(averageActivity <- mean(steps, na.rm = TRUE)), by = interval]
View(activity)
activity <- activity[, list(averageActivity <- mean(steps, na.rm = TRUE)), by = interval]
View(activity)
activity <- data.table(read.csv("activity.csv", sep = ",", header = TRUE))
str8activity)
str(activity)
activity[, list(averageActivity := mean(steps, na.rm = TRUE)), by = interval]
activity[, averageActivity := mean(steps, na.rm = TRUE), by = interval]
View(activity)
activity[is.na(steps), averageActivity := mean(steps, na.rm = TRUE), by = interval]
View(activity)
activity <- data.table(read.csv("activity.csv", sep = ",", header = TRUE))
activity[is.na(steps), steps := mean(steps, na.rm = TRUE), by = interval]
activity[, filledSteps := mean(steps, na.rm = TRUE), by = interval]
View(activity)
activity[, filledSteps := mean(steps, na.rm = TRUE), by = interval][is.na(steps, steps = filledSteps)]
activity[, filledSteps := mean(steps, na.rm = TRUE), by = interval][is.na(steps), steps = filledSteps]
activity[, filledSteps := mean(steps, na.rm = TRUE), by = interval][is.na(steps), steps <- filledSteps]
View(activity)
activity[, filledSteps := mean(steps, na.rm = TRUE), by = interval][is.na(steps), steps := filledSteps]
View(activity)
activity <- data.table(read.csv("activity.csv", sep = ",", header = TRUE))
filledActivity <- activity[, filledSteps <- mean(steps, na.rm = TRUE), by = interval][is.na(steps), steps <- filledSteps]
activity <- data.table(read.csv("activity.csv", sep = ",", header = TRUE))
activityPerDay <- activity[, list(totalActivity = sum(steps)), by = date]
hist(activityPerDay$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
mean(activityPerDay$totalActivity, na.rm = TRUE)
```
* Median
```{r, echo = FALSE}
median(activityPerDay$totalActivity, na.rm = TRUE)
```
activityPerInterval <- activity[, list(averageActivity <- mean(steps, na.rm = TRUE)), by = interval]
plot(activityPerInterval, type="l", main = "Average daily activity pattern", col = "red")
max(activityPerInterval$averageActivity)
max(activityPerInterval$averageActivity)
max(activityPerInterval$averageActivity, na.rm = TRUE)
activityPerInterval <- activity[, list(averageActivity <- mean(steps, na.rm = TRUE)), by = interval]
plot(activityPerInterval, type="l", main = "Average daily activity pattern", col = "red")
max(activityPerInterval$averageActivity)
summary(activityPerInterval)
activityPerInterval <- activity[, list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
plot(activityPerInterval, type="l", main = "Average daily activity pattern", col = "red")
max(activityPerInterval$averageActivity)
activity[, sum(is.na(steps))]
filledActivity <- activity[, filledSteps <- mean(steps, na.rm = TRUE), by = interval][is.na(steps), steps <- filledSteps]
filledActivity <- activity[, filledSteps <- mean(steps, na.rm = TRUE), by = interval]
View(filledActivity)
filledActivity <- activity[, filledSteps = mean(steps, na.rm = TRUE), by = interval][is.na(steps), steps = filledSteps]
filledActivity <- activity[, filledSteps = mean(steps, na.rm = TRUE), by = interval]
filledActivity <- activity[, list(filledSteps = mean(steps, na.rm = TRUE)), by = interval]
View(filledActivity)
filledActivity <- activity[, list(filledSteps = mean(steps, na.rm = TRUE), steps), by = interval]
filledActivity[is.na(steps), steps <- filledSteps]
filledActivity <- activity[, list(filledSteps = mean(steps, na.rm = TRUE), steps), by = interval]
View(filledActivity)
filledActivity <- activity[, list(date, filledSteps = mean(steps, na.rm = TRUE), steps), by = interval]
View(filledActivity)
filledActivity[is.na(steps), steps <- filledSteps]
View(filledActivity)
filledActivity[is.na(steps), steps := filledSteps]
View(filledActivity)
filledActivity <- activity[, list(date, filledSteps = mean(steps, na.rm = TRUE), steps), by = interval][order(date, interval)]
filledActivity[is.na(steps), steps := filledSteps]
View(filledActivity)
filledActivity <- filledActivity[, list(totalActivity = sum(steps)), by = date]
hist(filledActivity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
mean(filledActivity$totalActivity, na.rm = TRUE)
median(filledActivity$totalActivity, na.rm = TRUE)
hist(activityPerDay$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
hist(filledActivity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day (NA removed")
hist(activityPerDay$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
hist(filledActivity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day (NA removed")
mean(filledActivity$totalActivity, na.rm = TRUE)
median(filledActivity$totalActivity, na.rm = TRUE)
mean(activityPerDay$totalActivity, na.rm = TRUE)
median(activityPerDay$totalActivity, na.rm = TRUE)
median(activityPerDay$totalActivity, na.rm = TRUE)
mean(activityPerDay$totalActivity, na.rm = TRUE)
median(activityPerDay$totalActivity, na.rm = TRUE)
activity[, totalActivity := sum(steps), by = date]
hist(activity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
mean(activity$totalActivity, na.rm = TRUE)
median(activity$totalActivity, na.rm = TRUE)
filledActivity <- activity[, list(date, filledSteps = mean(steps, na.rm = TRUE), steps), by = interval][order(date, interval)]
filledActivity[is.na(steps), steps := filledSteps]
filledActivity[, totalActivity := sum(steps), by = date]
hist(activity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
hist(filledActivity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day (NA removed")
mean(activity$totalActivity, na.rm = TRUE)
median(activity$totalActivity, na.rm = TRUE)
mean(filledActivity$totalActivity, na.rm = TRUE)
median(filledActivity$totalActivity, na.rm = TRUE)
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
hist(activity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
hist(filledActivity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day (NA removed")
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
hist(activity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day")
hist(filledActivity$totalActivity, breaks=10, main = "Histogram of the total number of steps taken each day (NA's removed)")
weekend = c(6, 7)
weekend = c(6, 7)
filledActivity[weekdays(date) %in% weekend, weekend := TRUE]
filledActivity[weekdays(as.date(date)) %in% weekend, weekend := TRUE]
filledActivity[weekdays(as.date(Date)) %in% weekend, weekend := TRUE]
filledActivity[weekdays(as.Date(date)) %in% weekend, weekend := TRUE]
View(filledActivity)
filledActivity[weekdays(as.Date(date)) %in% weekend, day <- "weekend"]
filledActivity[weekdays(as.Date(date)) %in% weekend, day = "weekend"]
filledActivity[weekdays(as.Date(date)) %in% weekend, list(day = "weekend")]
view(filledActivity)
View(filledActivity)
filledActivity[weekdays(as.Date(date)) %in% weekend, day := "weekend"]
View(filledActivity)
filledActivity[weekdays(as.Date(date)) %in% weekend, day <- "weekend"]
View(filledActivity)
filledActivity[weekdays(as.Date(date)) %in% weekend]
weekend = c(6, 7)
weekdays(as.Date(filledActivity$date))
factor((weekdays(filledActivity$date) %in% weekend), levels=c(FALSE, TRUE), labels=c('weekday', 'weekend')
)
factor((weekdays(as.Date(filledActivity$date)) %in% weekend), levels=c(FALSE, TRUE), labels=c('weekday', 'weekend'))
factor((weekdays(as.Date(filledActivity[1]$date)) %in% weekend), levels=c(FALSE, TRUE), labels=c('weekday', 'weekend'))
?factor
testdays <- factor((weekdays(as.Date(filledActivity[1]$date)) %in% weekend), levels=c(FALSE, TRUE), labels=c('weekday', 'weekend'))
View(testdays)
testdays <- factor((weekdays(as.Date(filledActivity$date)) %in% weekend), levels=c(FALSE, TRUE), labels=c('weekday', 'weekend'))
View(testdays)
filledActivity[weekdays(as.Date(date)) %in% weekend, day <- "weekend"]
View(filledActivity)
filledActivity[weekdays(as.Date(date)) %in% weekend, day := "weekend"]
View(filledActivity)
filledActivity[weekdays(as.Date(date)) %in% weekend, list(day = "weekend")]
View(filledActivity)
filledActivity[weekdays(as.Date(date)) %in% weekend, list(day = "weekend")]
filledActivity[, day <- weekdays(as.Date(date))]
View(filledActivity)
filledActivity[, day := weekdays(as.Date(date))]
View(filledActivity)
filledActivity[day %in% weekend, day := "weekend"]
View(filledActivity)
filledActivity[day !%in% weekend, day := "weekday"]
filledActivity[day NOT%in% weekend, day := "weekday"]
weekdays = c("mandag", "tirsdag", "onsdag", "torsdag", "fredag")
filledActivity[day %in% weekdays, day := "weekday"]
View(filledActivity)
weekend = c("lørdag", "søndag")
weekdays = c("mandag", "tirsdag", "onsdag", "torsdag", "fredag")
filledActivity[, day := weekdays(as.Date(date))]
filledActivity[day %in% weekend, day := "weekend"]
filledActivity[day %in% weekdays, day := "weekday"]
View(filledActivity)
View(filledActivity)
weekend = c("lørdag", "søndag")
weekdays = c("mandag", "tirsdag", "onsdag", "torsdag", "fredag")
filledActivity[, day := weekdays(as.Date(date))]
filledActivity[day %in% weekend, day := "weekend"]
View(filledActivity)
library(lubridate)
wday(filledActivity[0]$date)
wday(as.Date(filledActivity[0]$date))
wday(as.Date(filledActivity[1]$date))
wday(as.Date(filledActivity[2]$date))
weeddays(as.Date(filledActivity[2]$date))
weekdays(as.Date(filledActivity[2]$date))
wday(as.Date(filledActivity[2]$date))
weekend = c(7, 8)
weekdays = c(2, 3, 4, 5, 6)
filledActivity[, day := wday(as.Date(date))]
View(filledActivity)
filledActivity[day %in% weekend, day := "weekend"]
filledActivity[day %in% weekdays, day := "weekday"]
View(filledActivity)
weekend = c(7, 8)
weekdays = c(2, 3, 4, 5, 6)
wday(as.Date(filledActivity[2]$date))
filledActivity[day %in% weekend, day := "weekend"]
filledActivity[day %in% weekdays, day := "weekday"]
View(filledActivity)
weekend = c(7, 8)
weekdays = c(2, 3, 4, 5, 6)
filledActivity[, daynr := wday(as.Date(date))]
filledActivity[daynr %in% weekend, day := "weekend"]
filledActivity[daynr %in% weekdays, day := "weekday"]
View(filledActivity)
filledActivity <- activity[, list(date, filledSteps = mean(steps, na.rm = TRUE), steps), by = interval][order(date, interval)]
filledActivity[is.na(steps), steps := filledSteps]
weekend = c(7, 8)
weekdays = c(2, 3, 4, 5, 6)
filledActivity[, daynr := wday(as.Date(date))]
filledActivity[daynr %in% weekend, day := "weekend"]
filledActivity[daynr %in% weekdays, day := "weekday"]
View(filledActivity)
weekend = c(7, 1)
weekdays = c(2, 3, 4, 5, 6)
filledActivity[wday(as.Date(date)) %in% weekend, day := "weekend"]
filledActivity[wday(as.Date(date)) %in% weekdays, day := "weekday"]
View(filledActivity)
activityPerIntervalWeekends <- filledActivity[day == "weekend", list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
activityPerIntervalWeekdays <- filledActivity[day == "weekdays", list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
plot(activityPerIntervalWeekends, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekdays, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekdays, type="l", main = "Average daily activity pattern", col = "red")
activityPerIntervalWeekends <- filledActivity[day == "weekend", list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
activityPerIntervalWeekdays <- filledActivity[day == "weekdays", list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
plot(activityPerIntervalWeekends, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekdays, type="l", main = "Average daily activity pattern", col = "red")
filledActivity <- activity[, list(date, filledSteps = mean(steps, na.rm = TRUE), steps), by = interval][order(date, interval)]
filledActivity[is.na(steps), steps := filledSteps]
weekend = c(7, 1)
weekdays = c(2, 3, 4, 5, 6)
filledActivity[wday(as.Date(date)) %in% weekend, day := "weekend"]
filledActivity[wday(as.Date(date)) %in% weekdays, day := "weekday"]
View(filledActivity)
activityPerIntervalWeekends <- filledActivity[day == "weekend", list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
activityPerIntervalWeekdays <- filledActivity[day == "weekdays", list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
plot(activityPerIntervalWeekends, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekdays, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekdays, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekends, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekdays, type="l", main = "Average daily activity pattern", col = "red")
activityPerIntervalWeekends <- filledActivity[day == "weekend", list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
activityPerIntervalWeekdays <- filledActivity[day == "weekday", list(averageActivity = mean(steps, na.rm = TRUE)), by = interval]
par(mfrow = c(2,1), mar = c(4, 4, 3, 2))
plot(activityPerIntervalWeekends, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekdays, type="l", main = "Average daily activity pattern", col = "red")
plot(activityPerIntervalWeekends, type="l", main = "Average daily activity pattern Weekends", col = "red")
plot(activityPerIntervalWeekdays, type="l", main = "Average daily activity pattern Weekdays", col = "red")
